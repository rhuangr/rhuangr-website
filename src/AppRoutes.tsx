import { Routes, Route, useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import type { ReactNode } from "react";
import { easeInOut, motion } from "framer-motion";
import { Skeleton } from "./components/ui/skeleton";
import { About } from "@/sections/About/About";
import { Projects } from "@/sections/Projects";
import { Experience } from "@/sections/Experience";
import {
  useRhuangrContext,
  type LLMOutputType,
} from "@/sections/About/rhuangrContext";

export default function AppRoutes() {
  return (
    <Routes>
      <Route path="/" element={<About />} />
      <Route path="/projects" element={<Projects />} />
      <Route path="/experience" element={<Experience />} />
      <Route path="/*" element={<DynamicRoute />} />
    </Routes>
  );
}

const DynamicRoute = () => {
  const { pathname } = useLocation();
  const navigate = useNavigate();
  const { parsedOutput } = useRhuangrContext();
  const [renderedPages, setRenderedPages] = useState<Map<string, ReactNode>>(
    new Map()
  );

  useEffect(() => {
    if (!parsedOutput) {
      return;
    }
    const slug = parsedOutput.heading.replace(/ /g, "_");
    setRenderedPages((prev) => {
      const updated = new Map(prev);
      updated.set(slug, formatResponse(parsedOutput));
      return updated;
    });

    if (pathname === "/loading") {
      navigate(`/${slug}`);
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: "smooth",
      });
    }
  }, [parsedOutput]);

  const pageKey = pathname.slice(1); // remove leading / from pathname

  return pageKey == "loading" ? (
    <LoadingPage />
  ) : renderedPages.has(pageKey) ? (
    <>{renderedPages.get(pageKey)}</>
  ) : (
    <ERROR404Page />
  );
};

const ERROR404Page = () => {
  return <div>ERROR 404 PAGE NOT FOUND!!</div>;
};

const LoadingPage = () => {
  return (
    <div className="w-full flex flex-col">
      <h1>Cooking something special...</h1>
      <Skeleton className="h-4 w-full mb-4 bg-card" />
      <Skeleton className="h-4 w-5/6 mb-2 bg-card" />
      <Skeleton className="h-4 w-2/3 mb-2 bg-card" />
      <Skeleton className="h-4 w-4/5 mb-2 bg-card" />
      <Skeleton className="h-4 w-1/2 mb-2 bg-card" />
    </div>
  );
};

function formatResponse(parsed: LLMOutputType): ReactNode {
  const variants = {
    hidden: { opacity: 0, y: 4 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.8, easeInOut } },
  };

  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={{
        hidden: {},
        visible: {
          transition: {
            staggerChildren: 0.2,
          },
        },
      }}
      className="space-y-8"
    >
      <motion.h1 variants={variants} className="text-heading text">
        {parsed.heading}
      </motion.h1>
      {parsed.paragraphs.map((p, index) => (
        <motion.div
          key={index}
          variants={variants}
          transition={{ duration: 0.6 }}
        >
          <h2>{p.subheading}</h2>
          <p>{p.content}</p>
        </motion.div>
      ))}
      <motion.div
        variants={variants}
        className="italic text-xs text-muted-foreground pt-4"
      >
        This content was generated by AI. Take it with a grain of salt!
      </motion.div>
    </motion.div>
  );
}
