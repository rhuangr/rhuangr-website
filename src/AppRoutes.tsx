import { Routes, Route, useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import type { ReactNode } from "react";
import { Skeleton } from "./components/ui/skeleton";
import { About } from "@/sections/About/About";
import { Projects } from "@/sections/Projects";
import { OtherFacts } from "@/sections/About/OtherFacts";
import {
  useRhuangrContext,
  type LLMOutputType,
} from "@/sections/About/rhuangrContext";
import { StaggeredContent } from "@/sections/utils/StaggeredContent";
import { Bot, CookingPot, CircleQuestionMark} from "lucide-react";
import { Appear, Shake } from "./sections/utils/HeadingIcon";

export default function AppRoutes() {
  return (
    <Routes>
      <Route path="/" element={<About />} />
      <Route path="/projects" element={<Projects />} />
      <Route path="/other" element={<OtherFacts />} />
      <Route path="/*" element={<DynamicRoute />} />
    </Routes>
  );
}

const DynamicRoute = () => {
  const { pathname } = useLocation();
  const navigate = useNavigate();
  const { parsedOutput } = useRhuangrContext();
  const [renderedPages, setRenderedPages] = useState<Map<string, ReactNode>>(
    new Map()
  );

  useEffect(() => {
    if (!parsedOutput) {
      return;
    }
    const slug = parsedOutput.heading.replace(/ /g, "_");
    setRenderedPages((prev) => {
      const updated = new Map(prev);
      updated.set(slug, formatResponse(parsedOutput));
      return updated;
    });

    if (pathname === "/loading") {
      navigate(`/${slug}`);
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: "smooth",
      });
    }
  }, [parsedOutput]);

  const pageKey = pathname.slice(1); // remove leading "/" from pathname

  return pageKey == "loading" ? (
    <LoadingPage />
  ) : renderedPages.has(pageKey) ? (
    <>{renderedPages.get(pageKey)}</>
  ) : (
    <ERROR404Page />
  );
};

const ERROR404Page = () => {
  return (
    <div>
      <h1>
        There's nothing here...{" "}
        <Appear>
          <CircleQuestionMark size={27} />
        </Appear>
      </h1>
    </div>
  );
};

const LoadingPage = () => {
  return (
    <div className="w-full flex flex-col">
      <h1>
        Cooking something special...
        <Shake infinite>
          <CookingPot size={27} />
        </Shake>
      </h1>
      <Skeleton className="h-3 w-full mb-2 bg-card mt-5" />
      <Skeleton className="h-3 w-5/6 mb-2 bg-card/80" />
      <Skeleton className="h-3 w-2/3 mb-2 bg-card/60" />
      <Skeleton className="h-3 w-4/5 mb-2 bg-card/40" />
      <Skeleton className="h-3 w-1/2 mb-2 bg-card/20" />
      <Skeleton className="h-3 w-1/3 mb-2 bg-card/10" />
    </div>
  );
};

function formatResponse(parsed: LLMOutputType): ReactNode {
  const children = [
    <h1 key="heading" className="text-heading text">
      {parsed.heading}
      <Appear>
        <Bot size={27} />
      </Appear>
    </h1>,
    ...parsed.paragraphs.map((p, index) => (
      <div key={index}>
        <h2>{p.subheading}</h2>
        <p>{p.content}</p>
      </div>
    )),
    <div key="disclaimer" className="italic text-xs text-muted-foreground pt-4">
      This content was generated by AI. Take it with a grain of salt!
    </div>,
  ];

  return <StaggeredContent>{children}</StaggeredContent>;
}
